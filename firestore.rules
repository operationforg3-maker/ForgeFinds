/**
 * @fileoverview Firestore Security Rules for Opportunity Hub.
 *
 * Core Philosophy: This ruleset prioritizes ease of iteration and development velocity.
 * It enforces authentication and basic ownership where appropriate but does NOT
 * validate data shapes or types. This allows for rapid prototyping without being
 * blocked by strict schema enforcement.
 *
 * Data Structure: The database contains products, deals, users, reviews, and
 * comments, with subcollections used to manage relationships (e.g., price history,
 * reviews, comments, votes).  User data is stored under /users/{userId}, where
 * userId matches the Firebase Auth UID.
 *
 * Key Security Decisions:
 * - Public Read Access: The ruleset allows public read access (`get`, `list`) to
 *   the `/products` and `/deals` collections. This assumes that all documents
 *   in these collections are intended to be publicly viewable.
 * - User Ownership: Creates, updates, and deletes on /users/{userId} are restricted
 *   to the authenticated user with a matching UID.
 * - Subcollection Ownership: Subcollections like `/products/{productId}/reviews/{reviewId}`
 *   inherit their security context from their parent documents.  Writes are generally
 *   restricted to the authenticated user.
 * - No Data Validation: The ruleset explicitly avoids data validation (schema/type
 *   checking) to accelerate development. This means that clients can write arbitrary
 *   data to the database, subject only to authentication and ownership constraints.
 * - Admin Roles: This ruleset does NOT implement any role-based access control
 *   (e.g., admin, moderator).
 * - Denormalization: Rules leverage denormalized fields like `authorId` in the
 *   `/deals` collection to avoid costly `get()` calls and ensure authorization
 *   independence.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to the products collection. Write access is open.
     * @path /products/{productId}
     * @allow (get, list): Any user can read product information.
     * @allow (create, update, delete): Any authenticated user can modify product.
     * @deny (create, update, delete): None
     * @principle Allows any user to read product information.
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create, update, delete: if true;
    }

    /**
     * @description Allows public read access to the price history of a product. Write access is open.
     * @path /products/{productId}/priceHistory/{priceHistoryId}
     * @allow (get, list): Any user can read price history information.
     * @allow (create, update, delete): Any authenticated user can modify price history.
     * @deny (create, update, delete): None
     * @principle Allows any user to read price history information.
     */
    match /products/{productId}/priceHistory/{priceHistoryId} {
      allow get, list: if true;
      allow create, update, delete: if true;
    }

    /**
     * @description Allows public read access to reviews for a product. Write access is open.
     * @path /products/{productId}/reviews/{reviewId}
     * @allow (get, list): Any user can read review information.
     * @allow (create, update, delete): Any authenticated user can modify reviews.
     * @deny (create, update, delete): None
     * @principle Allows any user to read review information.
     */
    match /products/{productId}/reviews/{reviewId} {
      allow get, list: if true;
      allow create, update, delete: if true;
    }

    /**
     * @description Allows public read access to deals collection. Write access is open.
     * @path /deals/{dealId}
     * @allow (get, list): Any user can read deal information.
     * @allow (create, update, delete): Any authenticated user can modify deals.
     * @deny (create, update, delete): None
     * @principle Allows any user to read deal information.
     */
    match /deals/{dealId} {
      allow get, list: if true;
      allow create, update, delete: if true;
    }

    /**
     * @description Allows public read access to comments for a deal. Write access is open.
     * @path /deals/{dealId}/comments/{commentId}
     * @allow (get, list): Any user can read comment information.
     * @allow (create, update, delete): Any authenticated user can modify comments.
     * @deny (create, update, delete): None
     * @principle Allows any user to read comment information.
     */
    match /deals/{dealId}/comments/{commentId} {
      allow get, list: if true;
      allow create, update, delete: if true;
    }

    /**
     * @description Allows public read access to votes for a deal. Write access is open.
     * @path /deals/{dealId}/votes/{voteId}
     * @allow (get, list): Any user can read vote information.
     * @allow (create, update, delete): Any authenticated user can modify votes.
     * @deny (create, update, delete): None
     * @principle Allows any user to read vote information.
     */
    match /deals/{dealId}/votes/{voteId} {
      allow get, list: if true;
      allow create, update, delete: if true;
    }

    /**
     * @description Allows any user to create, read, update and delete their own user document.
     * @path /users/{userId}
     * @allow (create): Authenticated user can create their own user document
     * @allow (get, list, update, delete): Any authenticated user can modify their own user document.
     * @deny (create): Unauthenticated user cannot create a user document.
     * @deny (get, list, update, delete): None
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
        allow get, list, create, update, delete: if true;
    }
  }
}